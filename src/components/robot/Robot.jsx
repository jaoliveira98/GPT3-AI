/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 robot.gltf
Author: ArbitraryCanary (https://sketchfab.com/ArbitraryCanary)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/k-vrc-love-death-robots-1a89dbad3a894642958405728ba66d9d
Title: K-VRC | Love, Death + Robots
*/

import React, { Suspense } from "react";
import { Canvas } from "@react-three/fiber";
import { OrbitControls } from "@react-three/drei";
import { useGLTF } from "@react-three/drei";

function Box() {
  return (
    <mesh>
      <boxGeometry args={[1, 1, 1]} />
    </mesh>
  );
}

function Model(props) {
  const { nodes, materials } = useGLTF("/robot.gltf");
  return (
    <group {...props} dispose={null} scale={0.1} position={[0, -1, 0]}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.Object_2.geometry}
          material={materials.BlackMetal}
        />
        <mesh
          geometry={nodes.Object_3.geometry}
          material={materials.ButterflyBody}
        />
        <mesh
          geometry={nodes.Object_4.geometry}
          material={materials.ButterflyWings}
        />
        <mesh geometry={nodes.Object_5.geometry} material={materials.Glow} />
        <mesh
          geometry={nodes.Object_6.geometry}
          material={materials.OrangePaint}
        />
        <mesh geometry={nodes.Object_7.geometry} material={materials.Screen} />
        <mesh geometry={nodes.Object_8.geometry} material={materials.Stripes} />
      </group>
    </group>
  );
}

useGLTF.preload("robot.gltf");

export default function Robot() {
  return (
    <Canvas camera={{ fov: 75, near: 0.1, far: 20, position: [0, 0, 1.7] }}>
      <OrbitControls enableZoom={false} />
      <ambientLight intensity={0.5} />
      <directionalLight position={[-2, 5, 2]} intensity={5} color="#ae67fa" />
      <directionalLight position={[-2, 5, 2]} intensity={0.2} color="#FFF" />
      <Suspense fallback={null}>
        <Model />
      </Suspense>
    </Canvas>
  );
}
